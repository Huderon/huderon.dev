---
import {getCollection, type CollectionEntry} from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import PostList from "@components/PostList.astro";
import Tags from "@components/Tags.astro";
import {getUniqueTags, getTagCounts, getSelectedTags, generateTagCombinations, filterPostsByTags} from "@lib/tags";
import Pagination from "@components/Pagination.astro";
import type {Page, GetStaticPathsOptions} from "astro";

interface Props {
	page: Page<CollectionEntry<"blog">>;
	filteredTagCounts?: Record<string, number>;
	tagCounts: Record<string, number>;
}

export async function getStaticPaths({paginate}: GetStaticPathsOptions) {
	const allPosts = await getCollection("blog");
	const sortedPosts = allPosts.sort(
		(a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
	);
	const uniqueTags = getUniqueTags(allPosts);
	const tagCombinations = generateTagCombinations(uniqueTags);

	return tagCombinations.flatMap((tagSlug) => {
		const selectedTags = getSelectedTags(tagSlug);
		const filteredPosts = filterPostsByTags(sortedPosts, selectedTags);
		const filteredTagCounts = getTagCounts(filteredPosts);
		const tagCounts = getTagCounts(allPosts);

		return paginate(filteredPosts, {
			params: {tag: tagSlug},
			props: {
				filteredTagCounts,
				tagCounts,
			},
			pageSize: 6,
		});
	});
}

const {tag} = Astro.params;
const {page, filteredTagCounts, tagCounts} = Astro.props;
const pageTitle = "Blog";
const pathname = Astro.url.pathname.split("/");
const basePath = `/${pathname[1]}/${pathname[2]}/${tag}`;
---

<BaseLayout pageTitle={pageTitle}>
	<h1>{pageTitle}</h1>

	<Tags filteredTagCounts={filteredTagCounts} tagCounts={tagCounts} slug={tag} />

	<PostList posts={page.data} />

	{page.lastPage > 1 && <Pagination page={page} basePath={basePath} />}
</BaseLayout>
